====
Payu
====

:subtitle: A climate model workflow manager
:author: Marshall Ward
:description: A Payu training course
:date: 3 October 2018


What is Payu?
=============

Etymology
---------

* *P*\ ython on v\ *AYU*

  Vayu was Raijin's predecessor and has passed away...

  ...but Payu lives on!


Motivation
----------

.. notes::
   Not only were we using scripts for all of our models, but we also were using
   more and more variations of scripts for various tasks.

   Version control had not quite caught on yet, but I don't think it would have
   addressed our problems anyway.

Long ago, we managed many, many jobscripts.

Many kinds of scripts:
   bash, tcsh, ksh, ...

Many different models:
   MOM, MITgcm, Q-GCM, ACCESS, ...

Juggling and sharing scripts was becoming a problem!


----

.. notes::
   Andy Hogg is probably the progenitor of Payu.  As Python became more popular
   in the group and we started using it for non-scientific tasks, Andy asked me
   why we don't just use Python for everything?

   I probably took this suggestion too literally.

   Here is a picture of Andy doing some important scientific computing.

.. image:: img/andy_at_nci.png

"Why not just do everything in Python?"


Prehistoric Payu
----------------

.. notes::
   There were even older versions which looked like bash scripts written in
   Python, which are so terrible that they're not even worth sharing.

.. code:: python

   from payu import gold

   def main():
       expt = gold(forcing='andrew')

       expt.setup()
       expt.run()
       expt.archive()
       if expt.counter < expt.max_counter:
           expt.resubmit()

   if __name__ == '__main__':
       main()


Using Payu
==========

Using an experiment
-------------------

Clone an existing experiment (usually in ``$HOME``):

.. code:: sh

   cd $HOME
   mkdir -p mom
   cd mom
   git clone /short/public/mxw900/payucourse/expt/bowl1

This is the "*control directory*" for ``bowl1``


Run the experiment
------------------

Use the system payu::

   module load payu/0.9.2

This job is pre-configured, run it!

.. code:: sh

   cd bowl1
   payu run

* Model will run in ``work/``

* Output saved to ``archive/``


Your experiment
---------------

Your Payu configuration file:

* ``config.yaml``

Your model (MOM) configuration files:

* ``input.nml``

* ``diag_table``

* ``data_table``

* ``field_table``


Experiment Configuration
------------------------

.. code:: yaml

   # PBS
   queue: express
   ncpus: 4
   walltime: 0:10:00
   mem: 1GB
   jobname: bowl1

   # Model
   model: mom
   input: /short/public/mxw900/payucourse/input/bowl1
   exe: /short/public/mxw900/payucourse/bin/mom51_solo_default
   collate: False


Inspecting the output
---------------------

======================  ======================
``mom.out``             Model output
``mom.err``             Model error
``bowl1.o${jobid}``     PBS (payu) output
``bowl1.e${jobid}``     PBS (payu) error
``archive/output000``   Model output files
``archive/restart000``  Restart (pickup) files
======================  ======================


Cleaning up
-----------

To clear ``work/`` and save PBS logs::

   payu sweep

Or to completely delete the experiment::

   payu sweep --hard

This wipes output, restarts, and logs! (``archive/$expt``)


Anatomy of an Experiment
========================

Control vs Laboratory
---------------------

Control path: ``${HOME}/mom/bowl1``
   User-configured (text) input

Laboratory: ``/short/$PROJECT/$USER/$MODEL/``
   Executables, data input, output, etc.

You "control" the laboratory externally


Laboratory overview
-------------------

============   ===============================
``archive``    Experiment output and restarts
``bin``        Model executables
``codebase``   Model Source code repository
``input``      Static input files
``work``       Ongoing (or failed) experiments
============   ===============================

"``payu init -m mom``" will create these directories

(But usually not necessary)

A simple configuration
----------------------

We use the YAML format

.. code:: yaml

   model: mom6
   name: om4_gm_test

   queue: normal
   jobname: mom6_om4
   walltime: 20:00
   ncpus: 960
   mem: 1500GB

   exe: mom6_intel17
   input:
       - om4_grid
       - om4_atm

Most variables have "sensible" defaults


A more complex configuration
----------------------------

.. code:: yaml

   # PBS configuration
   queue: normal
   project: fp0
   walltime: 02:30:00
   jobname: om2_jra55
   ncpus: 1153
   mem: 2000GB

   #platform:
   #   nodesize: 28

   laboratory: /short/fp0/mxw900/cosima
   repeat: True

   collate:
       walltime: 4:00:00
       mem: 30GB
       ncpus: 4
       queue: express
       flags: -n4 -z -m -r

   # Model configuration
   model: access
   submodels:
       - name: coupler
         model: oasis
         input: oasis_025
         ncpus: 0

       - name: atmosphere
         model: matm
         exe: matm
         #input: jra55-0.8_025
         input: /short/v45/mxw900/cosima/nc64
         ncpus: 1

       - name: ocean
         model: mom
         exe: mom
         input:
             - mom
             # - iaf-sw21d
         ncpus: 960

       - name: ice
         model: cice
         exe: cice_nohalo
         input: cice
         ncpus: 192

   calendar:
       runtime:
           years: 0
           months: 0
           days: 30
       start:
           year: 1
           month: 1
           days: 1

   # Misc
   env:
       SCOREP_TOTAL_MEMORY: 1073741824
       SCOREP_MPI_ENABLE_GROUPS: all
       SCOREP_METRIC_RUSAGE: all

(Note: Slightly out of date!)


Configuring your experiment
---------------------------

=========   ===============   ==============
Config      Description       Default
=========   ===============   ==============
``model``   Model type        (required!)
``name``    Experiment name   Expt directory
``exe``     Executable        Set by driver
``input``   Model inputs      -
=========   ===============   ==============

Paths can be absolute or relative to the lab path


Scheduler configuration
-----------------------

============   ==============    ============
Config         Description       Default
============   ==============    ============
``queue``      PBS Queue         ``normal``
``project``    SU Account        ``$PROJECT``
``jobname``    Queue job name    ``name``
``walltime``   Time request      (From PBS)
``ncpus``      CPU request       1
``mem``        RAM request       Max node mem
============   ==============    ============

``qsub_flags`` for everything else


CPU requests
------------

Normally ``ncpus`` will increase itself to match the node, but more control is
available:

+-----------+-------------+---------+
| Config    | Description | Default |
+-----------+-------------+---------+
| platform                          |
+-----------+-------------+---------+
| →nodesize | Node CPUs   | 16      |
+-----------+-------------+---------+
| →nodemem  | Node RAM    | 32 (GB) |
+-----------+-------------+---------+

This is currently required to use the Broadwell nodes:

.. code:: yaml

   platform:
      nodesize: 28
      nodemem: 128

.. others

   npernode    CPUs per node     (

   ``jobfs``
   ``priority``
   ``join``       Merge stdout/err  ``n``


The work directory
------------------

Run the following to inspect (and test) your run:

.. code:: sh

   payu setup

This will create your ``work/`` directory in the lab


Inside the work directory
-------------------------

.. notes::
	I don't know what `log` is, maybe Nic does?

Inspect the symbolic link to ``work`` and its contents::

   work/
   |-- INPUT
   |   |-- gotmturb.inp -> /short/fp0/mxw900/real_mom/input/bowl1/gotmturb.inp
   |   |-- grid_spec.nc -> /short/fp0/mxw900/real_mom/input/bowl1/grid_spec.nc
   |   `-- ocean_temp_salt.res.nc -> /short/fp0/mxw900/real_mom/input/bowl1/ocean_temp_salt.res.nc
   |-- RESTART
   |-- config.yaml
   |-- data_table
   |-- diag_table
   |-- field_table
   |-- input.nml
   `-- log


Your config files are copied, and sometimes modified.

Your input data is symlinked.


Feature overview
================

Multiple runs
-------------

To do multiple runs in sequence:

.. code::

   payu run -n 20

We save every output, and every 5th restart.

To change the rate::

   restart_freq: 1


Path control
------------

.. notes::
   Just about every path can be explicitly set, though at some point it does
   get a bit weird to, say, change the control path...

Default paths can be set explicitly

==============    ===================
``shortpath``     Root ("short") path
``laboratory``    Laboratory path
``experiment``    Experiment path
``control``       Control path
==============    ===================

Suppose you want to run out of ``x77`` but be changed under ``e14``?  Set the
``shortpath``!


MPI support
-----------

MPI support is very explicit at the moment:

.. notes::
   We used to rely on NCI wrapper scripts to fix the MPI module, but they have
   moved away from this feature.  So for now, we usually have to explicitly set
   the MPI module.

   Also, these particular settings are nonsense together, they're just various
   examples.

.. code:: yaml

   mpi:
       module: openmpi/2.1.1-debug
       modulepath: /home/157/mxw157/modules
       flags:
          - -mca orte_output_filename log
          - -mca pml yalla
       runcmd: map --profile mpiexec

Sometimes the NCI wrappers will adjust the module to match the executable, but
it's generally a good idea to set it correctly here.


Userscript support
------------------

Subcommands and scripts can be injected after key steps

.. code:: yaml

   userscripts:
      init: 'echo "some_data" > input.nml'
      setup: patch_inputs.py
      run: 'qsub postprocess.sh'

   postscript: sync_output_to_gdata.sh

These will run after the prescribed section.  ``postscript`` runs after
collation.


Supported models
----------------

To see the supported models::

   payu list

But expect some atrophy...


Forking and sharing experiments
===============================

Creating a new experiment
-------------------------

.. notes::
   Sharing experiments is new, but we are working on improving this experience

Let's have some **FUN** and increase the timestep::

   cd ../mom   # Or whatever
   git clone bowl1 bowl2
   cd bowl2

We are in a hurry, so let's make ``dt_ocean`` in ``input.nml`` very large::

   f90nml -g ocean_model_nml -v dt_ocean=86400 input.nml > tmp.nml
   mv tmp.nml input.nml

(Or use a text editor)


Recording your progress
-----------------------

Track your changes to the run::

   git log

and responsible people *always* document their changes::

   git commit -am "Testing a large timestep"

But if you're lazy then payu will commit upon completion.

Let's run it!


FAILURE
-------

.. image:: img/angry.jpg

Your run crashed!!!


Inspecting failed jobs
----------------------

Failed jobs retain ``mom.out``, ``mom.err``, and ``work/``.

From ``mom.err``::

   FATAL from PE    2: ==>Error: time step instability detected for baroclinic gravity waves in ocean_model_mod

   forrtl: error (78): process killed (SIGTERM)

Errors are saved to ``archive/error_logs`` with PBS job IDs.

(Note: Error logs can get big fast!)


GitHub integration
------------------

You can sync your experiment on GitHub::

   payu ghsetup
   payu push

Visit your experiment in GitHub!

(Warning: Probably going to rename ``push``...)


Other GitHub features
---------------------

.. notes::
   Remember to do a bit of a tech demo to mxw900-raijin here.

You can also save jobs to an organization::

   organization: mxw900-raijin

There are few other features here, and someday may be documented!

Currently "``payu push``" is manual, but we could make it automatic.


Coupled Models
==============

Coupled configuration
---------------------

Yes, Payu supports coupled models!

.. code:: yaml

   model: access-om2
   input: /short/public/access-om2/input_38570c62/common_01deg_jra55
   submodels:
       - name: atmosphere
         model: yatm
         exe: libom2/yatm_impi.exe
         input: /short/public/access-om2/input_38570c62/yatm_01deg
         ncpus: 1

       - name: ocean
         model: mom
         exe: libom2/fms_ACCESS-OM_impi.x
         input: /short/public/access-om2/input_38570c62/mom_01deg
         ncpus: 4358

       - name: ice
         model: cice5
         exe: libom2/cice_auscom_3600x2700_2000p_impi.exe
         input: /short/public/access-om2/input_38570c62/cice_01deg
         ncpus: 2000


Layout of a coupled model
-------------------------

Inputs, work and output are separated by the ``name``::

   libom2_1deg
   |-- accessom2.nml
   |-- archive -> /short/fp0/mxw900/access-om2/archive/libom2_1deg
   |-- atmosphere
   |   |-- atm.nml
   |   |-- checksums.txt
   |   `-- forcing.json
   |-- config.yaml
   |-- ice
   |   |-- cice_in.nml
   |   |-- input_ice.nml
   |   |-- input_ice_gfdl.nml
   |   `-- input_ice_monin.nml
   |-- namcouple
   |-- ocean
   |   |-- checksums.txt
   |   |-- data_table
   |   |-- diag_table
   |   |-- field_table
   |   `-- input.nml
   |-- sync_output_to_gdata.sh
   `-- sync_restarts_to_gdata.sh

Common files (``accessom2.nml``, ``namcouple``) lie outside the coupler.

Work directories have a similar structure.


Troubleshooting
===============

Model crashes
-------------

If you see this error in your PBS log::

   payu: Model exited with error code 134; aborting."

then it means the model crashed and payu has halted execution.

Check your error logs to figure out the problem.


Various Python errors
---------------------

Sometimes a missing file or misconfigured experiment will cause an error in
Python::

   Traceback (most recent call last):
     File "/home/157/mxw157/python/payu/bin/payu", line 8, in <module>
       cli.parse()
     File "/home/157/mxw157/python/payu/payu/cli.py", line 61, in parse
       run_cmd(**args)
     File "/home/157/mxw157/python/payu/payu/subcommands/setup_cmd.py", line 18, in runcmd
       expt.setup(force_archive=force_archive)
     File "/home/157/mxw157/python/payu/payu/experiment.py", line 353, in setup
       model.setup()
     File "/home/157/mxw157/python/payu/payu/models/mom.py", line 69, in setup
       super(Mom, self).setup()
     File "/home/157/mxw157/python/payu/payu/models/model.py", line 151, in setup
       shutil.copy(f_path, self.work_path)
     File "/apps/python/2.7.6/lib/python2.7/shutil.py", line 119, in copy
       copyfile(src, dst)
     File "/apps/python/2.7.6/lib/python2.7/shutil.py", line 82, in copyfile
       with open(src, 'rb') as fsrc:
   IOError: [Errno 2] No such file or directory: '/home/157/mxw157/mom/course/bowl2_course/input.nml'

Run ``payu setup`` and test that the experiment is set up properly.


Cloning issues
--------------

Many ``config.yaml`` contain relative paths for inputs and executables, which
can make sharing difficult!

Either copy (or symlink) their files into your local lab, or modify your
``config.yaml`` to use absolute paths.

On the developer end, we are thinking of better solutions here...


"Please send me your job script"
--------------------------------

NCI will often request a job script, which is a challenge because we don't have
one!

... but, NCI is starting to understand, and CMS is usually prepared to run
interference.


Summary
=======

What does Payu do?
------------------

* Common interface for many models

* Manages your inputs, executables, outputs, and restarts

* Tracks changes to your experiment

* Provides hooks to configure and control your job

* Enables sharing of configurations and inputs


Special Thanks
--------------

.. columns::

   .. column::

      .. image:: img/nic.jpeg
         :width: 42%

   .. column::

      .. image:: img/aidan.jpeg

Nic Hannah and Aidan Heerdegen have been top-level contributors and maintainers
of various pieces for a very long time.

Thank you!!


Future works
------------

Work only stops when people stop asking for features.

Questions?

What would you like to see?

Even better, contribute!
